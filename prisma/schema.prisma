generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./sqlite.db?connection_limit=1"
}

model Chat {
  id                BigInt             @id
  type              String
  title             String?
  username          String?
  firstName         String?
  lastName          String?
  messages          Message[]
  scheduledMessages ScheduledMessage[]
}

model ChatEntryMessagesUsers {
  message   Message @relation(fields: [messageId], references: [id])
  messageId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt

  @@id([messageId, userId], name: "id")
}

model DateTimeSetting {
  setting  String   @id
  dateTime DateTime
}

model Message {
  id                Int                      @id @default(autoincrement())
  telegramMessageId Int?
  chat              Chat                     @relation(fields: [chatId], references: [id])
  chatId            BigInt
  from              User                     @relation(fields: [fromId], references: [id])
  fromId            BigInt
  sentAt            DateTime
  editedAt          DateTime?
  replyToMessage    Message?                 @relation("ReplyToMessage", fields: [replyToMessageId], references: [id])
  replyToMessageId  Int?
  text              String
  imageFileId       String?
  stickerFileId     String?
  newChatMembers    ChatEntryMessagesUsers[]
  replies           Message[]                @relation("ReplyToMessage")
  toolCalls         Json?
  toolMessages      ToolMessage[]

  @@unique([telegramMessageId, chatId])
}

model ToolMessage {
  id         Int     @id @default(autoincrement())
  message    Message @relation(fields: [messageId], references: [id])
  messageId  Int
  toolCallId String
  text       String
}

model ScheduledMessage {
  id          Int      @id @default(autoincrement())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      BigInt
  from        User     @relation(fields: [fromId], references: [id])
  fromId      BigInt
  sendAt      DateTime
  scheduledAt DateTime @default(now())
  text        String
}

model User {
  id                BigInt                   @id
  isBot             Boolean
  firstName         String
  lastName          String?
  username          String?
  languageCode      String?
  messages          Message[]
  chatEntryMessages ChatEntryMessagesUsers[]
  scheduledMessages ScheduledMessage[]
  ownedPokemonCards PokemonCard[]
}

model PokemonSet {
  id       Int              @id @default(autoincrement())
  key      String           @unique
  name     String
  boosters PokemonBooster[]
  cards    PokemonCard[]
}

model PokemonBooster {
  id             Int           @id @default(autoincrement())
  name           String
  set            PokemonSet    @relation(fields: [setId], references: [id])
  setId          Int
  hasShinyRarity Boolean       @default(false)
  cards          PokemonCard[]

  @@unique([setId, name])
}

model PokemonCard {
  id       Int              @id @default(autoincrement())
  name     String
  set      PokemonSet       @relation(fields: [setId], references: [id])
  setId    Int
  number   Int
  rarity   Rarity?
  boosters PokemonBooster[]
  owners   User[]

  @@unique([setId, number])
}

enum Rarity {
  ONE_DIAMOND
  TWO_DIAMONDS
  THREE_DIAMONDS
  FOUR_DIAMONDS
  ONE_STAR
  TWO_STARS
  THREE_STARS
  FOUR_STARS
  ONE_SHINY
  TWO_SHINY
  CROWN
}
