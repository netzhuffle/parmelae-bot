generator client {
  provider   = "prisma-client"
  output     = "../src/generated/prisma"
  engineType = "client"
  runtime    = "bun"
}

datasource db {
  provider = "sqlite"
  url      = "file:./sqlite.db"
}

model Chat {
  id                BigInt             @id
  type              String
  title             String?
  username          String?
  firstName         String?
  lastName          String?
  messages          Message[]
  scheduledMessages ScheduledMessage[]
}

model ChatEntryMessagesUsers {
  message   Message @relation(fields: [messageId], references: [id])
  messageId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    BigInt

  @@id([messageId, userId], name: "id")
}

model DateTimeSetting {
  setting  String   @id
  dateTime DateTime
}

model Message {
  id                      Int                      @id @default(autoincrement())
  telegramMessageId       Int?
  chat                    Chat                     @relation(fields: [chatId], references: [id])
  chatId                  BigInt
  from                    User                     @relation(fields: [fromId], references: [id])
  fromId                  BigInt
  sentAt                  DateTime
  editedAt                DateTime?
  replyToMessage          Message?                 @relation("ReplyToMessage", fields: [replyToMessageId], references: [id])
  replyToMessageId        Int?
  text                    String
  imageFileId             String?
  stickerFileId           String?
  newChatMembers          ChatEntryMessagesUsers[]
  replies                 Message[]                @relation("ReplyToMessage")
  toolCalls               Json?
  toolMessages            ToolMessage[]
  messageAfterToolCalls   Message?                 @relation("MessageAfterToolCalls", fields: [messageAfterToolCallsId], references: [id])
  messageAfterToolCallsId Int?
  toolCallMessages        Message[]                @relation("MessageAfterToolCalls")

  @@unique([telegramMessageId, chatId])
  @@index([chatId])
  @@index([chatId, sentAt])
  @@index([chatId, id])
  @@index([sentAt])
  @@index([fromId])
  @@index([replyToMessageId])
}

model ToolMessage {
  id         Int     @id @default(autoincrement())
  message    Message @relation(fields: [messageId], references: [id])
  messageId  Int
  toolCallId String
  text       String

  @@index([messageId])
  @@index([toolCallId])
}

model ScheduledMessage {
  id          Int      @id @default(autoincrement())
  chat        Chat     @relation(fields: [chatId], references: [id])
  chatId      BigInt
  from        User     @relation(fields: [fromId], references: [id])
  fromId      BigInt
  sendAt      DateTime
  scheduledAt DateTime @default(now())
  text        String

  @@index([sendAt])
  @@index([chatId])
  @@index([fromId])
}

model User {
  id                BigInt                   @id
  isBot             Boolean
  firstName         String
  lastName          String?
  username          String?
  languageCode      String?
  messages          Message[]
  chatEntryMessages ChatEntryMessagesUsers[]
  scheduledMessages ScheduledMessage[]
  cardOwnerships    PokemonCardOwnership[]

  @@index([isBot])
  @@index([username])
}

model PokemonSet {
  id       Int              @id @default(autoincrement())
  key      String           @unique
  name     String
  boosters PokemonBooster[]
  cards    PokemonCard[]

  @@index([name])
}

model PokemonBooster {
  id             Int           @id @default(autoincrement())
  name           String
  set            PokemonSet    @relation(fields: [setId], references: [id])
  setId          Int
  hasShinyRarity Boolean       @default(false)
  hasSixPacks    Boolean       @default(false)
  cards          PokemonCard[]

  @@unique([setId, name])
  @@index([setId])
  @@index([hasShinyRarity])
  @@index([hasSixPacks])
}

model PokemonCard {
  id            Int                    @id @default(autoincrement())
  name          String
  set           PokemonSet             @relation(fields: [setId], references: [id])
  setId         Int
  number        Int
  rarity        Rarity?
  isSixPackOnly Boolean                @default(false)
  boosters      PokemonBooster[]
  ownership     PokemonCardOwnership[]

  @@unique([setId, number])
  @@index([setId])
  @@index([rarity])
  @@index([name])
  @@index([isSixPackOnly])
}

model PokemonCardOwnership {
  id        Int             @id @default(autoincrement())
  card      PokemonCard     @relation(fields: [cardId], references: [id])
  cardId    Int
  user      User            @relation(fields: [userId], references: [id])
  userId    BigInt
  status    OwnershipStatus
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([cardId, userId])
  @@index([userId])
  @@index([cardId])
  @@index([status])
}

enum Rarity {
  ONE_DIAMOND
  TWO_DIAMONDS
  THREE_DIAMONDS
  FOUR_DIAMONDS
  ONE_STAR
  TWO_STARS
  THREE_STARS
  FOUR_STARS
  ONE_SHINY
  TWO_SHINY
  CROWN
}

enum OwnershipStatus {
  OWNED
  NOT_NEEDED
}
