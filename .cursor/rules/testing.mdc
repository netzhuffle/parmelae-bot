---
description: Project rules and best practices for writing and executing tests 
globs: *.test.ts
alwaysApply: false
---

# Testing Standards

- **Every TypeScript file must have a corresponding .test.ts file** in the same folder
- **Prefer fakes over mocks**, placed in `/src/Fakes/` (see [testing_fakes.mdc](mdc:.cursor/rules/testing_fakes.mdc))
- **Only fake I/O operations** (DB, network); unit and integration test all business logic
- **Keep fakes simple** and void of any business logic (because there are no tests for tests!)
- **Test files should follow pattern**: `[originalFileName].test.ts`

## Bun:Test Implementation

**All test files MUST import required functions from `bun:test`:**

```typescript
// ✅ DO: Import all needed testing functions
import { describe, beforeEach, it, expect } from 'bun:test';

// ✅ DO: Import additional functions as needed
import { describe, beforeAll, afterAll, beforeEach, afterEach, it, test, expect, mock, spyOn } from 'bun:test';
```

## Test Structure

- **Follow arrange, act, assert pattern**
- **Keep tests simple** for easy correctness judgment
- **No business logic in tests** - repetition is fine, focus on readability
- **Always verify:**
  - Code runs without errors
  - Correct methods are called with correct arguments
  - Correct return values are returned or set
- **Avoid testing full, long strings** – test for relevant parts only

## Test Execution Commands

When done with implementation, test writing, and refactoring, run the full validation suite:

```bash
bun run format && bun run schema-format
bun run build  
bun run lint && bun run validate-yaml
bun test
```

**Always run the complete sequence** - if any step fails, fix the issue and restart from the beginning. Never skip steps.

## Test Examples from Codebase

**Basic Unit Test:**
```typescript
// From src/Tools/diceTool.test.ts
import { describe, beforeEach, it, expect } from 'bun:test';
import { diceTool } from './diceTool.js';

describe('diceTool', () => {
  beforeEach(() => {
    // Setup code
  });

  it('should roll dice correctly', async () => {
    // Arrange, Act, Assert
  });
});
```

Follow [testing_fakes.mdc](mdc:.cursor/rules/testing_fakes.mdc) for fake implementation patterns and [error_handling.mdc](mdc:.cursor/rules/error_handling.mdc) for testing error scenarios.