---
description: 
globs: src/AgentStateGraph/**/*.ts
alwaysApply: false
---
# LangGraph State Management

## State Annotation Patterns

- **State Definition Structure:**
  ```typescript
  export const StateAnnotation = Annotation.Root({
    messages: Annotation<BaseMessage[]>({
      reducer: (x, y) => x.concat(y),
    }),
    toolExecution: Annotation<ToolExecutionState>({
      reducer: (x, y) => ({ ...x, ...y }),
    }),
    toolCallMessageIds: Annotation<number[]>({
      reducer: (x, y) => x.concat(y),
      default: () => [],
    }),
  });
  ```

- **State Interface Design:**
  - Use descriptive interface names ending with `State`
  - Include optional fields with `?` for context that may not always be present
  - Use arrays for accumulating data (messages, IDs)
  - Use objects for contextual state that gets merged

## Node Factory Patterns

- **Factory Class Structure:**
  ```typescript
  @injectable()
  export class SomeNodeFactory {
    constructor(private readonly dependency: SomeService) {}
    
    create(params: SomeParams) {
      return async (state: typeof StateAnnotation.State) => {
        // Node logic here
        return { /* state updates */ };
      };
    }
  }
  ```

- **Node Implementation Guidelines:**
  - Always use `@injectable()` decorator for DI
  - Single `create()` method that returns the node function
  - Node functions are async and take state as parameter
  - Return partial state updates, not full state
  - Handle missing context gracefully with early returns

## State Management Best Practices

- **Context Tracking:**
  - Store execution context in dedicated state fields
  - Use message IDs for linking related operations
  - Accumulate IDs in arrays for later processing
  - Clear context when operations complete

- **Atomic Operations:**
  - Group related state updates in single return object
  - Ensure state consistency across node executions
  - Use conditional logic to prevent invalid state transitions

- **Graph Flow Patterns:**
  ```typescript
  return new StateGraph(StateAnnotation)
    .addNode('agent', this.agentNodeFactory.create(model))
    .addNode('toolCallAnnouncement', this.toolCallAnnouncementNodeFactory.create(callback))
    .addNode('tools', this.toolsNodeFactory.create(tools))
    .addNode('toolResponsePersistence', this.toolResponsePersistenceNodeFactory.create())
    .addEdge(START, 'agent')
    .addConditionalEdges('agent', routeFunction, ['toolCallAnnouncement', END])
    .addEdge('toolCallAnnouncement', 'tools')
    .addEdge('tools', 'toolResponsePersistence')
    .addEdge('toolResponsePersistence', 'agent')
    .compile();
  ```

## Testing Patterns

- **State Mocking:**
  ```typescript
  const state: typeof StateAnnotation.State = {
    messages: [/* test messages */],
    toolExecution: {/* test context */},
    toolCallMessageIds: [],
  };
  ```

- **Node Testing:**
  - Test with various state configurations
  - Verify state updates are correct
  - Test error handling and edge cases
  - Mock external dependencies in factory constructors

## Common Anti-Patterns

- ❌ **DON'T:** Mutate state directly
- ❌ **DON'T:** Return full state objects
- ❌ **DON'T:** Skip error handling in nodes
- ❌ **DON'T:** Create nodes without factories

- ✅ **DO:** Return partial state updates
- ✅ **DO:** Use reducer patterns for state merging
- ✅ **DO:** Handle missing context gracefully
- ✅ **DO:** Use factories for dependency injection
