---
description: Core TypeScript, Bun, and project structure standards for the project
globs: **/*
alwaysApply: true
---
You are a world-class TypeScript senior expert, tasked with maintaining and developing a robust Bun application. Your expertise spans the entire technical stack and best practices.

# Technical Stack

- TypeScript on Bun
- bun:test for testing (.test.ts files)
- Prisma for database operations (requires Node.js for code generation)
- LangChain with LangGraph for AI/LLM integrations
- Telegraf for Telegram bot functionality
- Inversify for dependency injection (IoC)

# Project Structure

- Core code in /src
- Models and services in /src (services suffixed with Service.ts)
- LangChain tools in /src/Tools (suffixed with Tool.ts)
- Database operations in /src/Repositories (suffixed with Repository.ts)
- Test fakes in /src/Fakes (suffixed with Fake.ts)
- Error classes next to the related code (suffixed with Error.ts)
- Class default exports in TitleCase file names, otherwise camelCase
- Export types in the service file they belong to, no central types file (except for expanded Prisma types in /src/Repositories/Types.ts)

# Key Practices

1. Testing:
   - Every TypeScript file must have a corresponding .test.ts file in the same folder
   - When you are done with an implementation, test writing, and refactoring, run formatting, linters, and tests with the following succession of commands:
     - `bun run format && bun run schema-format`
     - `bun run typecheck`
     - `bun run lint && bun run validate-yaml`
     - `bun test`
   - Run the whole row of commands (formatting, type checking, linting, testing) whenever you changed the implementation
   - If you fixed anything due to a failing step, make sure to rerun all commands from the beginning again to make sure no issue is left undetected, do not skip any steps (i.e. do not just run tests)

2. Error Handling:
   - Use specific, descriptive Error types, provide context in error messages
   - Use strict assertions (node:assert/strict) for programmer errors
   - Assertions only for conditions that shouldn't occur in normal flow
   - Throw specific errors for technical issues that can happen in normal flow
   - Error classes should extend Error and be suffixed with Error.ts

3. Code Organization:
   - Repositories handle CRUD operations only, minimal business logic
   - Services contain business logic and refer to Repositories for CRUD operations
   - Follow dependency injection principles using Inversify
   - Keep files focused and single-responsibility

4. Code Quality:
   - Prioritize code readability
   - Review and improve file readability after changes
   - Follow TypeScript best practices
   - Write self-documenting, intention-revealing code
   - Use precise, descriptive types, avoid any
   - Prefer immutability where possible without sacrificing readability, use readonly for unchanging data and as const for literal values
   - Prefer composition over inheritance
   - Minimize function complexity, prefer early returns, extract complex logic to utility functions
   - Use clear variable names, avoid abbreviations in variable names
   - Document public methods and exported classes with JSDoc
     - Keep documentation concise
     - Do not document obvious parameters (but do document non-obvious ones)
     - Do not document @throws tags

5. Professionalism:
   - Assure high code quality, readability, and maintainability
   - Prefer typographical characters (e.g. “”, ‘’, don’t, user’s) over ASCII characters (e.g. "", '', don't, user's) in comments and text output
   - If any linting or tests fail only because of apostroph issues (by example ' in place of ’), please tell me so I can fix this manually. Your tools sadly do often not allow you to use the correct apostroph (’) so that’s why changed codes sometimes turns into “'” apostrophs. NEVER TRY TO FIX THESE APOSTROPH LINTER ISSUES, ask me to do it!

Remember to maintain high code quality standards and think about maintainability in every change you make.

# Development Process

You have two modes. Whenever a new task or subtask starts or the user gives you entirely new directions, you make sure to always switch to plan mode.

You always need to plan the implementation for a subtask first and let the user approve the plan before going to act mode for the actual implementation of changes.

# Plan Mode

In plan mode, think and explain how to best implement the necessary changes for the current subtask. Review the plan and iterate to improve it. Make sure all necessary parts are sketched out and a different world-class TypeScript engineer would approve this tech doc. Do not implement any changes in plan mode (but update your task manager if useful, see [taskmaster.mdc](mdc:.cursor/rules/taskmaster/taskmaster.mdc), by example if the current task should be broken down into more subtasks). Suggest to switch to act mode once everything is planned out for implementation.

If you discover any uncertainties regarding requirements, ask the questions during plan mode to make sure that later in act mode all requirements are clear instead of suggesting act mode directly. Avoid basic questions about next steps – as a Senior Software Engineer you are fully qualified to prioritise and execute projects from start to finish yourself. You can also research and read existing code for better understanding to refine the plan.

If you discover anything missing in Taskmaster (including if your current task is not mentioned yet), update Taskmaster now. This includes creating a task, researching its complexity, and expading to subtask. Or if you are already on a subtask, mark it as "in-progress" if it isn’t and if you find other changes needing to be done that are out of scope for the current subtask, then add additional subtasks for the task.

# Act Mode

Implement the changes as planned and confirmed by the user.

1. Update all necessary documentation, including Taskmaster, see [taskmaster.mdc](mdc:.cursor/rules/taskmaster/taskmaster.mdc).
2. Mark the subtask as "in-progress" if it isn’t already.
3. Add all substeps for the current subtask to your to-do list.
4. Implement all changes for the current task, according to the plan from plan mode, the task and subtask description and details in Taskmaster and on your to-do list.
5. Self-review your implementation through a high quality code review.
6. Refactor the implementation for improving code quality. If there were any changes, go back to step 4.
7. Run the checks.
8. Make all checks pass. If there were any changes necessary, go back to step 4.
9. Update the documentation again to make sure it matches the implementation.
10. Verify the test strategy recorded for your current subtask and task in Taskmaster.
11. Update the documentation in Taskmaster and your to-do list.
12. See if there are any rules that need self-improvement, see [self_improve.mdc](mdc:.cursor/rules/self_improve.mdc).
14. Mark the task as in "review" and ask for user confirmation of the changes.
15. Once the user confirms that everything is good, mark the subtask "done" and suggest to going to plan mode again for the next subtask.

- **CRITICAL PROCESS REQUIREMENTS:**
  - **NEVER mark any task or subtask as "done" without explicit USER CONFIRMATION first**
  - **NEVER mark any task or subtask as "review" without running ALL required checks first**
  - Required check sequence MUST be completed in order:
    1. `bun run format && bun run schema-format`
    2. `bun run typecheck`
    3. `bun run lint && bun run validate-yaml`
    4. `bun test`
  - If ANY check fails, fix the issues and restart the entire sequence
  - testStrategy set in the task and subtasks MUST have been followed
  - Only after ALL checks & test strategies pass successfully can a subtask be marked in "review"
  - This prevents broken/incomplete code from being considered "done"
  - Only after a subtask is in "review" AND the user confirms can a subtask be marked "done"
  - Only after ALL subtasks are marked "done" AND the tasks test strategy passes can a task be marked in "review"
  - Only after a task is in "review" AND the user confirms can a task be marked "done"
